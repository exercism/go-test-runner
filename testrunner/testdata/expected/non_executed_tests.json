{
	"status": "fail",
	"version": 3,
	"tests": [
		{
			"name": "TestPreparationTime/ Preparation time for many layers with custom average time",
			"status": "pass",
			"test_code": "func TestPreparationTime(t *testing.T) {\n\ttt := preparationTimeTests{\n\t\tname: \"Preparation time for many layers with custom average time\",\n\t\tlayers: []string{\n\t\t\t\"sauce\",\n\t\t\t\"noodles\",\n\t\t\t\"béchamel\",\n\t\t\t\"meat\",\n\t\t\t\"mozzarella\",\n\t\t\t\"noodles\",\n\t\t\t\"ricotta\",\n\t\t\t\"eggplant\",\n\t\t\t\"béchamel\",\n\t\t\t\"noodles\",\n\t\t\t\"sauce\",\n\t\t\t\"mozzarella\",\n\t\t},\n\t\ttime:     1,\n\t\texpected: 12,\n\t}\n\n\tif got := PreparationTime(tt.layers, tt.time); got != tt.expected {\n\t\tt.Errorf(\"PreparationTime(%v, %d) = %d; want %d\", tt.layers, tt.time, got, tt.expected)\n\t}\n\n}",
			"message": "\n=== RUN   TestPreparationTime/Preparation_time_for_many_layers_with_custom_average_time\n\n--- PASS: TestPreparationTime/Preparation_time_for_many_layers_with_custom_average_time \n",
			"task_id": 1
		},
		{
			"name": "TestPreparationTime/ Preparation time for few layers",
			"status": "pass",
			"test_code": "func TestPreparationTime(t *testing.T) {\n\ttt := preparationTimeTests{\n\t\tname: \"Preparation time for few layers\",\n\t\tlayers: []string{\n\t\t\t\"sauce\",\n\t\t\t\"noodles\",\n\t\t},\n\t\ttime:     3,\n\t\texpected: 6,\n\t}\n\n\tif got := PreparationTime(tt.layers, tt.time); got != tt.expected {\n\t\tt.Errorf(\"PreparationTime(%v, %d) = %d; want %d\", tt.layers, tt.time, got, tt.expected)\n\t}\n\n}",
			"message": "\n=== RUN   TestPreparationTime/Preparation_time_for_few_layers\n\n--- PASS: TestPreparationTime/Preparation_time_for_few_layers \n",
			"task_id": 1
		},
		{
			"name": "TestPreparationTime/ Preparation time for default case",
			"status": "pass",
			"test_code": "func TestPreparationTime(t *testing.T) {\n\ttt := preparationTimeTests{\n\t\tname: \"Preparation time for default case\",\n\t\tlayers: []string{\n\t\t\t\"sauce\",\n\t\t\t\"noodles\",\n\t\t},\n\t\ttime:     0,\n\t\texpected: 4,\n\t}\n\n\tif got := PreparationTime(tt.layers, tt.time); got != tt.expected {\n\t\tt.Errorf(\"PreparationTime(%v, %d) = %d; want %d\", tt.layers, tt.time, got, tt.expected)\n\t}\n\n}",
			"message": "\n=== RUN   TestPreparationTime/Preparation_time_for_default_case\n\n--- PASS: TestPreparationTime/Preparation_time_for_default_case \n",
			"task_id": 1
		},
		{
			"name": "TestQuantities/ few layers",
			"status": "fail",
			"test_code": "func TestQuantities(t *testing.T) {\n\ttt := quantitiesTest{\n\t\tname:       \"few layers\",\n\t\tlayers:     []string{\"noodles\", \"sauce\", \"noodles\"},\n\t\texpNoodles: 100,\n\t\texpSauce:   0.2,\n\t}\n\n\tgotNoodles, gotSauce := Quantities(tt.layers)\n\tif gotNoodles != tt.expNoodles {\n\t\tt.Errorf(\"quantities(%v) = %d noodles; want %d\", tt.layers, gotNoodles, tt.expNoodles)\n\t}\n\tif gotSauce != tt.expSauce {\n\t\tt.Errorf(\"quantities(%v) = %f sauce; want %f\", tt.layers, gotSauce, tt.expSauce)\n\t}\n\n}",
			"message": "\n=== RUN   TestQuantities/few_layers\n\n--- FAIL: TestQuantities/few_layers \n\npanic: Please implement [recovered]\n\n\tpanic: Please implement\n\n\n\ngoroutine x [running]:\n\ntesting.tRunner.func1.2({, })\n\n\tPATH_PLACEHOLDER/src/testing/testing.go \n\ntesting.tRunner.func1()\n\n\tPATH_PLACEHOLDER/src/testing/testing.go \n\npanic({, })\n\n\tPATH_PLACEHOLDER/src/runtime/panic.go \n\nlasagna.Quantities(...)\n\n\tPATH_PLACEHOLDER/testrunner/testdata/concept/non_executed_tests/lasagna_master.go\n\nlasagna.TestQuantities.func1?)\n\n\tPATH_PLACEHOLDER/testrunner/testdata/concept/non_executed_tests/lasagna_master_test.go \n\ntesting.tRunner, \n\n\tPATH_PLACEHOLDER/src/testing/testing.go \n\ncreated by testing.(*T).Run\n\n\tPATH_PLACEHOLDER/src/testing/testing.go \n",
			"task_id": 2
		},
		{
			"name": "TestAddSecretIngredient",
			"status": "error",
			"test_code": "func TestAddSecretIngredient(t *testing.T) {\n\ttests := []secretTest{\n\t\t{\n\t\t\tname:\t\t\"Adds secret ingredient\",\n\t\t\tfriendsList:\t[]string{\"sauce\", \"noodles\", \"béchamel\", \"marjoram\"},\n\t\t\tmyList:\t\t[]string{\"sauce\", \"noodles\", \"meat\", \"tomatoes\", \"?\"},\n\t\t\texpected:\t[]string{\"sauce\", \"noodles\", \"meat\", \"tomatoes\", \"marjoram\"},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tfriendsList := make([]string, len(tt.friendsList))\n\t\t\tcopy(friendsList, tt.friendsList)\n\t\t\tmyList := make([]string, len(tt.myList))\n\t\t\tcopy(myList, tt.myList)\n\t\t\tAddSecretIngredient(tt.friendsList, tt.myList)\n\t\t\tif !reflect.DeepEqual(tt.myList, tt.expected) {\n\t\t\t\tt.Errorf(\"addSecretIngredient(%v, %v) = %v want %v\", tt.friendsList, myList, tt.myList, tt.expected)\n\t\t\t}\n\t\t\tif !reflect.DeepEqual(friendsList, tt.friendsList) {\n\t\t\t\tt.Errorf(\"addSecretIngredient permuted friendsList (was %v, now %v), should not alter inputs\", tt.friendsList, friendsList)\n\t\t\t}\n\t\t})\n\t}\n}",
			"message": "This test was not executed.",
			"task_id": 3
		},
		{
			"name": "TestScaleRecipe",
			"status": "error",
			"test_code": "func TestScaleRecipe(t *testing.T) {\n\ttests := []scaleRecipeTest{\n\t\t{\n\t\t\tname:\t\t\"scales up correctly\",\n\t\t\tinput:\t\t[]float64{0.5, 250, 150, 3, 0.5},\n\t\t\tportions:\t6,\n\t\t\texpected:\t[]float64{1.5, 750, 450, 9, 1.5},\n\t\t},\n\t\t{\n\t\t\tname:\t\t\"scales up correctly (2)\",\n\t\t\tinput:\t\t[]float64{0.6, 300, 1, 0.5, 50, 0.1, 100},\n\t\t\tportions:\t3,\n\t\t\texpected:\t[]float64{0.9, 450, 1.5, 0.75, 75, 0.15, 150},\n\t\t},\n\t\t{\n\t\t\tname:\t\t\"scales down correctly\",\n\t\t\tinput:\t\t[]float64{0.5, 250, 150, 3, 0.5},\n\t\t\tportions:\t1,\n\t\t\texpected:\t[]float64{0.25, 125, 75, 1.5, 0.25},\n\t\t},\n\t\t{\n\t\t\tname:\t\t\"empty recipe\",\n\t\t\tinput:\t\t[]float64{},\n\t\t\tportions:\t100,\n\t\t\texpected:\t[]float64{},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tinputList := make([]float64, len(tt.input))\n\t\t\tcopy(inputList, tt.input)\n\t\t\tgot := ScaleRecipe(inputList, tt.portions)\n\t\t\tif len(got) != len(tt.expected) {\n\t\t\t\tt.Errorf(\"ScaleRecipe(%v, %d) produced slice of length %d, expected %d\", inputList, tt.portions, len(got), len(tt.expected))\n\t\t\t}\n\t\t\tfor i := range tt.expected {\n\t\t\t\tif math.Abs(got[i]-tt.expected[i]) \u003e 0.000001 {\n\t\t\t\t\tt.Errorf(\"Got %f Expected %f for index %d\", got[i], tt.expected[i], i)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !reflect.DeepEqual(inputList, tt.input) {\n\t\t\t\tt.Errorf(\"ScaleRecipe permuted list (was %v, now %v), should not alter inputs\", tt.input, inputList)\n\t\t\t}\n\t\t})\n\t}\n}",
			"message": "This test was not executed.",
			"task_id": 4
		}
	]
}